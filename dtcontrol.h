/****************************************************************************
**
** Namespace DTControl generated by dumpcpp from type library
** ApponsDetector.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_DTCONTROL_H
#define QAX_DUMPCPP_DTCONTROL_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef DTCONTROL_EXPORT
#define DTCONTROL_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace DTControl {


// skipping event interface _IDTDisplayControlEvents

class DTCONTROL_EXPORT IDTDisplayControl : public QAxObject
{
public:
    IDTDisplayControl(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AutoSize
    */
    inline bool AutoSize() const; //Returns the value of AutoSize

    /*
    Property BorderVisible
    */
    inline bool BorderVisible() const; //Returns the value of BorderVisible

    /*
    Property Object

    property Object

    */
    inline IUnknown* Object() const; //Returns the value of Object

    /*
    Method SetAutoSize
    */
    inline void SetAutoSize(bool AutoSize);

    /*
    Method SetBorderVisible
    */
    inline void SetBorderVisible(bool BorderVisible);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IDTDetectorEvents

class DTCONTROL_EXPORT IDTDetector : public QAxObject
{
public:
    IDTDetector(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BaudRate

    property BaudRate

    */
    inline int BaudRate() const; //Returns the value of BaudRate
    inline void SetBaudRate(int value); //Sets the value of the BaudRate property

    /*
    Property ChannelType

    property ChannelType

    */
    inline int ChannelType() const; //Returns the value of ChannelType
    inline void SetChannelType(int value); //Sets the value of the ChannelType property

    /*
    Property CmdPort

    property CmdPort

    */
    inline int CmdPort() const; //Returns the value of CmdPort
    inline void SetCmdPort(int value); //Sets the value of the CmdPort property

    /*
    Property CmdTimeOut

    property CmdTimeOut

    */
    inline int CmdTimeOut() const; //Returns the value of CmdTimeOut
    inline void SetCmdTimeOut(int value); //Sets the value of the CmdTimeOut property

    /*
    Property IPAddress

    property IPAddress

    */
    inline QString IPAddress() const; //Returns the value of IPAddress
    inline void SetIPAddress(const QString& value); //Sets the value of the IPAddress property

    /*
    Property IsOpened

    property IsOpened

    */
    inline int IsOpened() const; //Returns the value of IsOpened

    /*
    Property LastErrID

    property LastErrID

    */
    inline int LastErrID() const; //Returns the value of LastErrID

    /*
    Property ObjectHandle

    property ObjectHandle

    */
    inline IUnknown* ObjectHandle() const; //Returns the value of ObjectHandle

    /*
    Property SerialPort

    property SerialPort

    */
    inline int SerialPort() const; //Returns the value of SerialPort
    inline void SetSerialPort(int value); //Sets the value of the SerialPort property

    /*
    Method Close

    method Close

    */
    inline void Close();

    /*
    Method Open

    method Open

    */
    inline int Open();

    /*
    Method PrintErrMsg

    method PrintErrMsg

    */
    inline void PrintErrMsg(int ErrID, QString& ErrMsg);

    /*
    Method SendCommand

    method SendCommand

    */
    inline int SendCommand(const QString& bstrCmd, QString& bstrRTMsg);

    /*
    Method SendCommandA

    method SendCommandA

    */
    inline int SendCommandA(int& Cmd, int& pRT);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IDTCommanderF3Events

class DTCONTROL_EXPORT IDTCommanderF3 : public QAxObject
{
public:
    IDTCommanderF3(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AverageFilter

    property AverageFilter

    */
    inline int AverageFilter() const; //Returns the value of AverageFilter
    inline void SetAverageFilter(int value); //Sets the value of the AverageFilter property

    /*
    Property Baseline

    property Baseline

    */
    inline int Baseline() const; //Returns the value of Baseline
    inline void SetBaseline(int value); //Sets the value of the Baseline property

    /*
    Property CorrectionBaseline

    property CorrectionBaseline

    */
    inline int CorrectionBaseline() const; //Returns the value of CorrectionBaseline
    inline void SetCorrectionBaseline(int value); //Sets the value of the CorrectionBaseline property

    /*
    Property CorrectionGain

    property CorrectionGain

    */
    inline int CorrectionGain() const; //Returns the value of CorrectionGain
    inline void SetCorrectionGain(int value); //Sets the value of the CorrectionGain property

    /*
    Property CorrectionOffset

    property CorrectionOffset

    */
    inline int CorrectionOffset() const; //Returns the value of CorrectionOffset
    inline void SetCorrectionOffset(int value); //Sets the value of the CorrectionOffset property

    /*
    Property DataPattern

    property DataPattern

    */
    inline int DataPattern() const; //Returns the value of DataPattern
    inline void SetDataPattern(int value); //Sets the value of the DataPattern property

    /*
    Property DetectorObject

    property DetectorObject

    */
    inline IUnknown* DetectorObject() const; //Returns the value of DetectorObject
    inline void SetDetectorObject(IUnknown* value); //Sets the value of the DetectorObject property

    /*
    Property EndPixel

    property EndPixel

    */
    inline int EndPixel() const; //Returns the value of EndPixel
    inline void SetEndPixel(int value); //Sets the value of the EndPixel property

    /*
    Property FPGA_Build

    property FPGA_Build

    */
    inline int FPGA_Build() const; //Returns the value of FPGA_Build

    /*
    Property FPGA_Version

    property FPGA_Version

    */
    inline int FPGA_Version() const; //Returns the value of FPGA_Version

    /*
    Property FrameOut

    property FrameOut

    */
    inline int FrameOut() const; //Returns the value of FrameOut
    inline void SetFrameOut(int value); //Sets the value of the FrameOut property

    /*
    Property FrameTrigger

    property FrameTrigger

    */
    inline int FrameTrigger() const; //Returns the value of FrameTrigger
    inline void SetFrameTrigger(int value); //Sets the value of the FrameTrigger property

    /*
    Property ImageOutputType

    property ImageOutputType

    */
    inline int ImageOutputType() const; //Returns the value of ImageOutputType
    inline void SetImageOutputType(int value); //Sets the value of the ImageOutputType property

    /*
    Property IntegrationTime

    property IntegrationTime

    */
    inline int IntegrationTime() const; //Returns the value of IntegrationTime
    inline void SetIntegrationTime(int value); //Sets the value of the IntegrationTime property

    /*
    Property IsOpened

    property IsOpened

    */
    inline int IsOpened() const; //Returns the value of IsOpened

    /*
    Property LineTrigger

    property LineTrigger

    */
    inline int LineTrigger() const; //Returns the value of LineTrigger
    inline void SetLineTrigger(int value); //Sets the value of the LineTrigger property

    /*
    Property MCU_Version

    property MCU_Version

    */
    inline int MCU_Version() const; //Returns the value of MCU_Version

    /*
    Property MaxIntTime

    property MaxIntTime

    */
    inline int MaxIntTime() const; //Returns the value of MaxIntTime

    /*
    Property MinIntTime

    property MinIntTime

    */
    inline int MinIntTime() const; //Returns the value of MinIntTime

    /*
    Property ModuleType

    property ModuleType

    */
    inline int ModuleType() const; //Returns the value of ModuleType

    /*
    Property ModuleTypeName

    property ModuleTypeNmae

    */
    inline QString ModuleTypeName() const; //Returns the value of ModuleTypeName

    /*
    Property OutputBits

    property OutputBits

    */
    inline int OutputBits() const; //Returns the value of OutputBits
    inline void SetOutputBits(int value); //Sets the value of the OutputBits property

    /*
    Property OverallGain

    property OverallGain

    */
    inline double OverallGain() const; //Returns the value of OverallGain
    inline void SetOverallGain(double value); //Sets the value of the OverallGain property

    /*
    Property PixelNumber

    property PixelNumber

    */
    inline int PixelNumber() const; //Returns the value of PixelNumber

    /*
    Property PixelSize

    property PixelSize

    */
    inline double PixelSize() const; //Returns the value of PixelSize

    /*
    Property SensitivityLevel

    property SensitivityLevel

    */
    inline int SensitivityLevel() const; //Returns the value of SensitivityLevel
    inline void SetSensitivityLevel(int value); //Sets the value of the SensitivityLevel property

    /*
    Property SerialNumber

    property SerialNumber

    */
    inline QString SerialNumber() const; //Returns the value of SerialNumber

    /*
    Property StartPixel

    property StartPixel

    */
    inline int StartPixel() const; //Returns the value of StartPixel
    inline void SetStartPixel(int value); //Sets the value of the StartPixel property

    /*
    Property SumLines

    property SumLines

    */
    inline int SumLines() const; //Returns the value of SumLines
    inline void SetSumLines(int value); //Sets the value of the SumLines property

    /*
    Method Gain

    property Gain

    */
    inline double Gain(int Index);

    /*
    Method Initialize

    method Initialize

    */
    inline void Initialize(int Mode);

    /*
    Method LoadGain

    method LoadGain

    */
    inline void LoadGain(int Index);

    /*
    Method LoadOffset

    method LoadOffset

    */
    inline void LoadOffset();

    /*
    Method OffBoardCalibration

    method OffBoardCalibration

    */
    inline void OffBoardCalibration(int CalibrationType, IUnknown* pImgObject, int StartPixel, int EndPixel, int TargetValue);

    /*
    Method Offset

    property Offset

    */
    inline int Offset(int Index);

    /*
    Method OnBoardGainCalibration

    method OnBoardGainCalibration

    */
    inline void OnBoardGainCalibration(int TargetValue);

    /*
    Method OnBoardOffsetCalibration

    method OnBoardOffsetCalibration

    */
    inline void OnBoardOffsetCalibration();

    /*
    Method ResetGain

    method ResetGain

    */
    inline void ResetGain();

    /*
    Method ResetOffset

    method ResetOffset

    */
    inline void ResetOffset();

    /*
    Method RetrieveSysinfo

    method RetrieveSysinfo

    */
    inline void RetrieveSysinfo();

    /*
    Method SaveCurrentStatus

    method SaveCurrentStatus

    */
    inline void SaveCurrentStatus();

    /*
    Method SaveGain

    method SaveGain

    */
    inline void SaveGain(int Index);

    /*
    Method SaveOffset

    method SaveOffset

    */
    inline void SaveOffset();

    /*
    Method SendExFrameTrigger

    method SendExFrameTrigger

    */
    inline void SendExFrameTrigger();

    /*
    Method SetGain
    */
    inline void SetGain(int Index, double rhs);

    /*
    Method SetOffset
    */
    inline void SetOffset(int Index, int rhs);

    /*
    Method WriteDataPattern

    method WriteDataPattern

    */
    inline void WriteDataPattern(int Base, int Step);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DTCONTROL_EXPORT IImageObject : public QAxObject
{
public:
    IImageObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BytesPerPixel

    property BytesPerPixel

    */
    inline int BytesPerPixel() const; //Returns the value of BytesPerPixel

    /*
    Property Height

    property Height

    */
    inline int Height() const; //Returns the value of Height

    /*
    Property ImageDataAddress

    property ImageDataAddress

    */
    inline int ImageDataAddress() const; //Returns the value of ImageDataAddress
    inline void SetImageDataAddress(int value); //Sets the value of the ImageDataAddress property

    /*
    Property Width

    property Width

    */
    inline int Width() const; //Returns the value of Width

    /*
    Method ColAverage

    method ColAverage

    */
    inline void ColAverage(int& pAvg);

    /*
    Method ColMax

    method ColMax

    */
    inline void ColMax(int& pMax);

    /*
    Method ColMin

    method ColMin

    */
    inline void ColMin(int& pMin);

    /*
    Method ColNoise

    method ColNoise

    */
    inline void ColNoise(double& pNoise);

    /*
    Method ImageLineAddress

    property ImageLineAddress

    */
    inline int ImageLineAddress(int LineIndex);

    /*
    Method Open

    method Open

    */
    inline void Open(int Width, int Height, int BytesPerPixel);

    /*
    Method Pixel

    property Pixel

    */
    inline int Pixel(int X, int Y);

    /*
    Method RowAverage

    method RowAverage

    */
    inline void RowAverage(int& pAvg);

    /*
    Method RowMax

    method RowMax

    */
    inline void RowMax(int& pMax);

    /*
    Method RowMin

    method RowMin

    */
    inline void RowMin(int& pMin);

    /*
    Method RowNoise

    method RowNoise

    */
    inline void RowNoise(double& pNoise);

    /*
    Method SetPixel
    */
    inline void SetPixel(int X, int Y, int rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IDTDisplayEvents

class DTCONTROL_EXPORT IDTDisplay : public QAxObject
{
public:
    IDTDisplay(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DataSource

    property DataSource

    */
    inline IUnknown* DataSource() const; //Returns the value of DataSource
    inline void SetDataSource(IUnknown* value); //Sets the value of the DataSource property

    /*
    Property DisplayControl

    property DisplayControl

    */
    inline IUnknown* DisplayControl() const; //Returns the value of DisplayControl
    inline void SetDisplayControl(IUnknown* value); //Sets the value of the DisplayControl property

    /*
    Property DisplayScale

    property DisplayScale

    */
    inline int DisplayScale() const; //Returns the value of DisplayScale
    inline void SetDisplayScale(int value); //Sets the value of the DisplayScale property

    /*
    Property Gamma

    property Gamma

    */
    inline double Gamma() const; //Returns the value of Gamma
    inline void SetGamma(double value); //Sets the value of the Gamma property

    /*
    Property ImageObject

    property ImageObject

    */
    inline IUnknown* ImageObject() const; //Returns the value of ImageObject

    /*
    Property ImgHeight

    property Height

    */
    inline uint ImgHeight() const; //Returns the value of ImgHeight
    inline void SetImgHeight(uint value); //Sets the value of the ImgHeight property

    /*
    Property ImgWidth

    property Width

    */
    inline uint ImgWidth() const; //Returns the value of ImgWidth
    inline void SetImgWidth(uint value); //Sets the value of the ImgWidth property

    /*
    Property MapEnd

    property MapEnd

    */
    inline int MapEnd() const; //Returns the value of MapEnd
    inline void SetMapEnd(int value); //Sets the value of the MapEnd property

    /*
    Property MapStart

    property MapStart

    */
    inline int MapStart() const; //Returns the value of MapStart
    inline void SetMapStart(int value); //Sets the value of the MapStart property

    /*
    Property ObjectHandle

    property ObjectHandle

    */
    inline IUnknown* ObjectHandle() const; //Returns the value of ObjectHandle

    /*
    Property OrgPoint_X

    property OrgPoint_X

    */
    inline int OrgPoint_X() const; //Returns the value of OrgPoint_X
    inline void SetOrgPoint_X(int value); //Sets the value of the OrgPoint_X property

    /*
    Property OrgPoint_Y

    property OrgPoint_Y

    */
    inline int OrgPoint_Y() const; //Returns the value of OrgPoint_Y
    inline void SetOrgPoint_Y(int value); //Sets the value of the OrgPoint_Y property

    /*
    Property RefreshMode

    property RefreshMode

    */
    inline int RefreshMode() const; //Returns the value of RefreshMode
    inline void SetRefreshMode(int value); //Sets the value of the RefreshMode property

    /*
    Property RefreshRate

    property RefreshRate

    */
    inline int RefreshRate() const; //Returns the value of RefreshRate
    inline void SetRefreshRate(int value); //Sets the value of the RefreshRate property

    /*
    Method Close

    method Close

    */
    inline void Close();

    /*
    Method Load

    method Load

    */
    inline void Load(const QString& FilePath);

    /*
    Method Open

    method Open

    */
    inline int Open();

    /*
    Method Refresh

    method Refresh

    */
    inline void Refresh();

    /*
    Method Repaint

    method Repaint

    */
    inline void Repaint();

    /*
    Method Save

    method Save

    */
    inline void Save(const QString& FilePath);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IDTImageEvents

class DTCONTROL_EXPORT IDTImage : public QAxObject
{
public:
    IDTImage(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BandWidth

    property BandWidth

    */
    inline int BandWidth() const; //Returns the value of BandWidth

    /*
    Property BytesPerPixel

    property BytesPerPixel

    */
    inline int BytesPerPixel() const; //Returns the value of BytesPerPixel
    inline void SetBytesPerPixel(int value); //Sets the value of the BytesPerPixel property

    /*
    Property ChannelType

    property CardType

    */
    inline int ChannelType() const; //Returns the value of ChannelType
    inline void SetChannelType(int value); //Sets the value of the ChannelType property

    /*
    Property DetectorObject

    property DetectorObject

    */
    inline IUnknown* DetectorObject() const; //Returns the value of DetectorObject
    inline void SetDetectorObject(IUnknown* value); //Sets the value of the DetectorObject property

    /*
    Property DualScanMode
    */
    inline int DualScanMode() const; //Returns the value of DualScanMode
    inline void SetDualScanMode(int value); //Sets the value of the DualScanMode property

    /*
    Property ExFrameTrigger

    property ExFrameTrigger

    */
    inline int ExFrameTrigger() const; //Returns the value of ExFrameTrigger
    inline void SetExFrameTrigger(int value); //Sets the value of the ExFrameTrigger property

    /*
    Property ImageObject

    property ImageObject

    */
    inline IUnknown* ImageObject() const; //Returns the value of ImageObject

    /*
    Property ImagePort

    property ImagePort

    */
    inline int ImagePort() const; //Returns the value of ImagePort
    inline void SetImagePort(int value); //Sets the value of the ImagePort property

    /*
    Property ImgHeight

    property ImgHeight

    */
    inline int ImgHeight() const; //Returns the value of ImgHeight
    inline void SetImgHeight(int value); //Sets the value of the ImgHeight property

    /*
    Property ImgWidth

    property ImgWidth

    */
    inline int ImgWidth() const; //Returns the value of ImgWidth
    inline void SetImgWidth(int value); //Sets the value of the ImgWidth property

    /*
    Property IsGrabing

    property IsGrabing

    */
    inline int IsGrabing() const; //Returns the value of IsGrabing

    /*
    Property IsOpened

    property IsOpened

    */
    inline int IsOpened() const; //Returns the value of IsOpened

    /*
    Property LastErrID

    property LastErrID

    */
    inline int LastErrID() const; //Returns the value of LastErrID

    /*
    Property ObjectHandle

    property ObjectHandle

    */
    inline IUnknown* ObjectHandle() const; //Returns the value of ObjectHandle

    /*
    Property SubFrameHeight

    property SubFrameHeight

    */
    inline int SubFrameHeight() const; //Returns the value of SubFrameHeight
    inline void SetSubFrameHeight(int value); //Sets the value of the SubFrameHeight property

    /*
    Property TimeOut

    property TimeOut

    */
    inline int TimeOut() const; //Returns the value of TimeOut
    inline void SetTimeOut(int value); //Sets the value of the TimeOut property

    /*
    Method Close

    method Close

    */
    inline void Close();

    /*
    Method Grab

    method Grab

    */
    inline int Grab(int FrameNum);

    /*
    Method Open

    method Open

    */
    inline int Open();

    /*
    Method OpenMemImage
    */
    inline void OpenMemImage(int Width, int Height, uint& data);

    /*
    Method PrintErrMsg

    method PrintErrMsg

    */
    inline void PrintErrMsg(int ErrID, QString& ErrMsg);

    /*
    Method Snap

    method Snap

    */
    inline int Snap(int FrameNum);

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class DTCONTROL_EXPORT CDTDisplayControl : public QAxWidget
{
public:
    CDTDisplayControl(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{dce3040a-003a-4325-9fae-c5a9da79203c}");
    }

    CDTDisplayControl(IDTDisplayControl *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AutoSize
    */
    inline bool AutoSize() const; //Returns the value of AutoSize

    /*
    Property BorderVisible
    */
    inline bool BorderVisible() const; //Returns the value of BorderVisible

    /*
    Property Object

    property Object

    */
    inline IUnknown* Object() const; //Returns the value of Object

    /*
    Method SetAutoSize
    */
    inline void SetAutoSize(bool AutoSize);

    /*
    Method SetBorderVisible
    */
    inline void SetBorderVisible(bool BorderVisible);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DTCONTROL_EXPORT CDTDetector : public QAxWidget
{
public:
    CDTDetector(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{d3120961-c570-471d-b62e-5b2636502d85}");
    }

    CDTDetector(IDTDetector *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BaudRate

    property BaudRate

    */
    inline int BaudRate() const; //Returns the value of BaudRate
    inline void SetBaudRate(int value); //Sets the value of the BaudRate property

    /*
    Property ChannelType

    property ChannelType

    */
    inline int ChannelType() const; //Returns the value of ChannelType
    inline void SetChannelType(int value); //Sets the value of the ChannelType property

    /*
    Property CmdPort

    property CmdPort

    */
    inline int CmdPort() const; //Returns the value of CmdPort
    inline void SetCmdPort(int value); //Sets the value of the CmdPort property

    /*
    Property CmdTimeOut

    property CmdTimeOut

    */
    inline int CmdTimeOut() const; //Returns the value of CmdTimeOut
    inline void SetCmdTimeOut(int value); //Sets the value of the CmdTimeOut property

    /*
    Property IPAddress

    property IPAddress

    */
    inline QString IPAddress() const; //Returns the value of IPAddress
    inline void SetIPAddress(const QString& value); //Sets the value of the IPAddress property

    /*
    Property IsOpened

    property IsOpened

    */
    inline int IsOpened() const; //Returns the value of IsOpened

    /*
    Property LastErrID

    property LastErrID

    */
    inline int LastErrID() const; //Returns the value of LastErrID

    /*
    Property ObjectHandle

    property ObjectHandle

    */
    inline IUnknown* ObjectHandle() const; //Returns the value of ObjectHandle

    /*
    Property SerialPort

    property SerialPort

    */
    inline int SerialPort() const; //Returns the value of SerialPort
    inline void SetSerialPort(int value); //Sets the value of the SerialPort property

    /*
    Method Close

    method Close

    */
    inline void Close();

    /*
    Method Open

    method Open

    */
    inline int Open();

    /*
    Method PrintErrMsg

    method PrintErrMsg

    */
    inline void PrintErrMsg(int ErrID, QString& ErrMsg);

    /*
    Method SendCommand

    method SendCommand

    */
    inline int SendCommand(const QString& bstrCmd, QString& bstrRTMsg);

    /*
    Method SendCommandA

    method SendCommandA

    */
    inline int SendCommandA(int& Cmd, int& pRT);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DTCONTROL_EXPORT CDTCommanderF3 : public QAxWidget
{
public:
    CDTCommanderF3(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{7d934547-7258-4c06-9ad3-a3143e9056ca}");
    }

    CDTCommanderF3(IDTCommanderF3 *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AverageFilter

    property AverageFilter

    */
    inline int AverageFilter() const; //Returns the value of AverageFilter
    inline void SetAverageFilter(int value); //Sets the value of the AverageFilter property

    /*
    Property Baseline

    property Baseline

    */
    inline int Baseline() const; //Returns the value of Baseline
    inline void SetBaseline(int value); //Sets the value of the Baseline property

    /*
    Property CorrectionBaseline

    property CorrectionBaseline

    */
    inline int CorrectionBaseline() const; //Returns the value of CorrectionBaseline
    inline void SetCorrectionBaseline(int value); //Sets the value of the CorrectionBaseline property

    /*
    Property CorrectionGain

    property CorrectionGain

    */
    inline int CorrectionGain() const; //Returns the value of CorrectionGain
    inline void SetCorrectionGain(int value); //Sets the value of the CorrectionGain property

    /*
    Property CorrectionOffset

    property CorrectionOffset

    */
    inline int CorrectionOffset() const; //Returns the value of CorrectionOffset
    inline void SetCorrectionOffset(int value); //Sets the value of the CorrectionOffset property

    /*
    Property DataPattern

    property DataPattern

    */
    inline int DataPattern() const; //Returns the value of DataPattern
    inline void SetDataPattern(int value); //Sets the value of the DataPattern property

    /*
    Property DetectorObject

    property DetectorObject

    */
    inline IUnknown* DetectorObject() const; //Returns the value of DetectorObject
    inline void SetDetectorObject(IUnknown* value); //Sets the value of the DetectorObject property

    /*
    Property EndPixel

    property EndPixel

    */
    inline int EndPixel() const; //Returns the value of EndPixel
    inline void SetEndPixel(int value); //Sets the value of the EndPixel property

    /*
    Property FPGA_Build

    property FPGA_Build

    */
    inline int FPGA_Build() const; //Returns the value of FPGA_Build

    /*
    Property FPGA_Version

    property FPGA_Version

    */
    inline int FPGA_Version() const; //Returns the value of FPGA_Version

    /*
    Property FrameOut

    property FrameOut

    */
    inline int FrameOut() const; //Returns the value of FrameOut
    inline void SetFrameOut(int value); //Sets the value of the FrameOut property

    /*
    Property FrameTrigger

    property FrameTrigger

    */
    inline int FrameTrigger() const; //Returns the value of FrameTrigger
    inline void SetFrameTrigger(int value); //Sets the value of the FrameTrigger property

    /*
    Property ImageOutputType

    property ImageOutputType

    */
    inline int ImageOutputType() const; //Returns the value of ImageOutputType
    inline void SetImageOutputType(int value); //Sets the value of the ImageOutputType property

    /*
    Property IntegrationTime

    property IntegrationTime

    */
    inline int IntegrationTime() const; //Returns the value of IntegrationTime
    inline void SetIntegrationTime(int value); //Sets the value of the IntegrationTime property

    /*
    Property IsOpened

    property IsOpened

    */
    inline int IsOpened() const; //Returns the value of IsOpened

    /*
    Property LineTrigger

    property LineTrigger

    */
    inline int LineTrigger() const; //Returns the value of LineTrigger
    inline void SetLineTrigger(int value); //Sets the value of the LineTrigger property

    /*
    Property MCU_Version

    property MCU_Version

    */
    inline int MCU_Version() const; //Returns the value of MCU_Version

    /*
    Property MaxIntTime

    property MaxIntTime

    */
    inline int MaxIntTime() const; //Returns the value of MaxIntTime

    /*
    Property MinIntTime

    property MinIntTime

    */
    inline int MinIntTime() const; //Returns the value of MinIntTime

    /*
    Property ModuleType

    property ModuleType

    */
    inline int ModuleType() const; //Returns the value of ModuleType

    /*
    Property ModuleTypeName

    property ModuleTypeNmae

    */
    inline QString ModuleTypeName() const; //Returns the value of ModuleTypeName

    /*
    Property OutputBits

    property OutputBits

    */
    inline int OutputBits() const; //Returns the value of OutputBits
    inline void SetOutputBits(int value); //Sets the value of the OutputBits property

    /*
    Property OverallGain

    property OverallGain

    */
    inline double OverallGain() const; //Returns the value of OverallGain
    inline void SetOverallGain(double value); //Sets the value of the OverallGain property

    /*
    Property PixelNumber

    property PixelNumber

    */
    inline int PixelNumber() const; //Returns the value of PixelNumber

    /*
    Property PixelSize

    property PixelSize

    */
    inline double PixelSize() const; //Returns the value of PixelSize

    /*
    Property SensitivityLevel

    property SensitivityLevel

    */
    inline int SensitivityLevel() const; //Returns the value of SensitivityLevel
    inline void SetSensitivityLevel(int value); //Sets the value of the SensitivityLevel property

    /*
    Property SerialNumber

    property SerialNumber

    */
    inline QString SerialNumber() const; //Returns the value of SerialNumber

    /*
    Property StartPixel

    property StartPixel

    */
    inline int StartPixel() const; //Returns the value of StartPixel
    inline void SetStartPixel(int value); //Sets the value of the StartPixel property

    /*
    Property SumLines

    property SumLines

    */
    inline int SumLines() const; //Returns the value of SumLines
    inline void SetSumLines(int value); //Sets the value of the SumLines property

    /*
    Method Gain

    property Gain

    */
    inline double Gain(int Index);

    /*
    Method Initialize

    method Initialize

    */
    inline void Initialize(int Mode);

    /*
    Method LoadGain

    method LoadGain

    */
    inline void LoadGain(int Index);

    /*
    Method LoadOffset

    method LoadOffset

    */
    inline void LoadOffset();

    /*
    Method OffBoardCalibration

    method OffBoardCalibration

    */
    inline void OffBoardCalibration(int CalibrationType, IUnknown* pImgObject, int StartPixel, int EndPixel, int TargetValue);

    /*
    Method Offset

    property Offset

    */
    inline int Offset(int Index);

    /*
    Method OnBoardGainCalibration

    method OnBoardGainCalibration

    */
    inline void OnBoardGainCalibration(int TargetValue);

    /*
    Method OnBoardOffsetCalibration

    method OnBoardOffsetCalibration

    */
    inline void OnBoardOffsetCalibration();

    /*
    Method ResetGain

    method ResetGain

    */
    inline void ResetGain();

    /*
    Method ResetOffset

    method ResetOffset

    */
    inline void ResetOffset();

    /*
    Method RetrieveSysinfo

    method RetrieveSysinfo

    */
    inline void RetrieveSysinfo();

    /*
    Method SaveCurrentStatus

    method SaveCurrentStatus

    */
    inline void SaveCurrentStatus();

    /*
    Method SaveGain

    method SaveGain

    */
    inline void SaveGain(int Index);

    /*
    Method SaveOffset

    method SaveOffset

    */
    inline void SaveOffset();

    /*
    Method SendExFrameTrigger

    method SendExFrameTrigger

    */
    inline void SendExFrameTrigger();

    /*
    Method SetGain
    */
    inline void SetGain(int Index, double rhs);

    /*
    Method SetOffset
    */
    inline void SetOffset(int Index, int rhs);

    /*
    Method WriteDataPattern

    method WriteDataPattern

    */
    inline void WriteDataPattern(int Base, int Step);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DTCONTROL_EXPORT CImageObject : public QAxObject
{
public:
    CImageObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{c3bdf6c3-7738-41fe-97f9-618b28f4f82b}");
    }

    CImageObject(IImageObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BytesPerPixel

    property BytesPerPixel

    */
    inline int BytesPerPixel() const; //Returns the value of BytesPerPixel

    /*
    Property Height

    property Height

    */
    inline int Height() const; //Returns the value of Height

    /*
    Property ImageDataAddress

    property ImageDataAddress

    */
    inline int ImageDataAddress() const; //Returns the value of ImageDataAddress
    inline void SetImageDataAddress(int value); //Sets the value of the ImageDataAddress property

    /*
    Property Width

    property Width

    */
    inline int Width() const; //Returns the value of Width

    /*
    Method ColAverage

    method ColAverage

    */
    inline void ColAverage(int& pAvg);

    /*
    Method ColMax

    method ColMax

    */
    inline void ColMax(int& pMax);

    /*
    Method ColMin

    method ColMin

    */
    inline void ColMin(int& pMin);

    /*
    Method ColNoise

    method ColNoise

    */
    inline void ColNoise(double& pNoise);

    /*
    Method ImageLineAddress

    property ImageLineAddress

    */
    inline int ImageLineAddress(int LineIndex);

    /*
    Method Open

    method Open

    */
    inline void Open(int Width, int Height, int BytesPerPixel);

    /*
    Method Pixel

    property Pixel

    */
    inline int Pixel(int X, int Y);

    /*
    Method RowAverage

    method RowAverage

    */
    inline void RowAverage(int& pAvg);

    /*
    Method RowMax

    method RowMax

    */
    inline void RowMax(int& pMax);

    /*
    Method RowMin

    method RowMin

    */
    inline void RowMin(int& pMin);

    /*
    Method RowNoise

    method RowNoise

    */
    inline void RowNoise(double& pNoise);

    /*
    Method SetPixel
    */
    inline void SetPixel(int X, int Y, int rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DTCONTROL_EXPORT CDTDisplay : public QAxWidget
{
public:
    CDTDisplay(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{f984b792-41db-4d78-95a7-1c80e40938fd}");
    }

    CDTDisplay(IDTDisplay *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DataSource

    property DataSource

    */
    inline IUnknown* DataSource() const; //Returns the value of DataSource
    inline void SetDataSource(IUnknown* value); //Sets the value of the DataSource property

    /*
    Property DisplayControl

    property DisplayControl

    */
    inline IUnknown* DisplayControl() const; //Returns the value of DisplayControl
    inline void SetDisplayControl(IUnknown* value); //Sets the value of the DisplayControl property

    /*
    Property DisplayScale

    property DisplayScale

    */
    inline int DisplayScale() const; //Returns the value of DisplayScale
    inline void SetDisplayScale(int value); //Sets the value of the DisplayScale property

    /*
    Property Gamma

    property Gamma

    */
    inline double Gamma() const; //Returns the value of Gamma
    inline void SetGamma(double value); //Sets the value of the Gamma property

    /*
    Property ImageObject

    property ImageObject

    */
    inline IUnknown* ImageObject() const; //Returns the value of ImageObject

    /*
    Property ImgHeight

    property Height

    */
    inline uint ImgHeight() const; //Returns the value of ImgHeight
    inline void SetImgHeight(uint value); //Sets the value of the ImgHeight property

    /*
    Property ImgWidth

    property Width

    */
    inline uint ImgWidth() const; //Returns the value of ImgWidth
    inline void SetImgWidth(uint value); //Sets the value of the ImgWidth property

    /*
    Property MapEnd

    property MapEnd

    */
    inline int MapEnd() const; //Returns the value of MapEnd
    inline void SetMapEnd(int value); //Sets the value of the MapEnd property

    /*
    Property MapStart

    property MapStart

    */
    inline int MapStart() const; //Returns the value of MapStart
    inline void SetMapStart(int value); //Sets the value of the MapStart property

    /*
    Property ObjectHandle

    property ObjectHandle

    */
    inline IUnknown* ObjectHandle() const; //Returns the value of ObjectHandle

    /*
    Property OrgPoint_X

    property OrgPoint_X

    */
    inline int OrgPoint_X() const; //Returns the value of OrgPoint_X
    inline void SetOrgPoint_X(int value); //Sets the value of the OrgPoint_X property

    /*
    Property OrgPoint_Y

    property OrgPoint_Y

    */
    inline int OrgPoint_Y() const; //Returns the value of OrgPoint_Y
    inline void SetOrgPoint_Y(int value); //Sets the value of the OrgPoint_Y property

    /*
    Property RefreshMode

    property RefreshMode

    */
    inline int RefreshMode() const; //Returns the value of RefreshMode
    inline void SetRefreshMode(int value); //Sets the value of the RefreshMode property

    /*
    Property RefreshRate

    property RefreshRate

    */
    inline int RefreshRate() const; //Returns the value of RefreshRate
    inline void SetRefreshRate(int value); //Sets the value of the RefreshRate property

    /*
    Method Close

    method Close

    */
    inline void Close();

    /*
    Method Load

    method Load

    */
    inline void Load(const QString& FilePath);

    /*
    Method Open

    method Open

    */
    inline int Open();

    /*
    Method Refresh

    method Refresh

    */
    inline void Refresh();

    /*
    Method Repaint

    method Repaint

    */
    inline void Repaint();

    /*
    Method Save

    method Save

    */
    inline void Save(const QString& FilePath);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DTCONTROL_EXPORT CDTImage : public QAxWidget
{
public:
    CDTImage(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{addec18d-6a72-4873-9be7-b708463b8adc}");
    }

    CDTImage(IDTImage *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BandWidth

    property BandWidth

    */
    inline int BandWidth() const; //Returns the value of BandWidth

    /*
    Property BytesPerPixel

    property BytesPerPixel

    */
    inline int BytesPerPixel() const; //Returns the value of BytesPerPixel
    inline void SetBytesPerPixel(int value); //Sets the value of the BytesPerPixel property

    /*
    Property ChannelType

    property CardType

    */
    inline int ChannelType() const; //Returns the value of ChannelType
    inline void SetChannelType(int value); //Sets the value of the ChannelType property

    /*
    Property DetectorObject

    property DetectorObject

    */
    inline IUnknown* DetectorObject() const; //Returns the value of DetectorObject
    inline void SetDetectorObject(IUnknown* value); //Sets the value of the DetectorObject property

    /*
    Property DualScanMode
    */
    inline int DualScanMode() const; //Returns the value of DualScanMode
    inline void SetDualScanMode(int value); //Sets the value of the DualScanMode property

    /*
    Property ExFrameTrigger

    property ExFrameTrigger

    */
    inline int ExFrameTrigger() const; //Returns the value of ExFrameTrigger
    inline void SetExFrameTrigger(int value); //Sets the value of the ExFrameTrigger property

    /*
    Property ImageObject

    property ImageObject

    */
    inline IUnknown* ImageObject() const; //Returns the value of ImageObject

    /*
    Property ImagePort

    property ImagePort

    */
    inline int ImagePort() const; //Returns the value of ImagePort
    inline void SetImagePort(int value); //Sets the value of the ImagePort property

    /*
    Property ImgHeight

    property ImgHeight

    */
    inline int ImgHeight() const; //Returns the value of ImgHeight
    inline void SetImgHeight(int value); //Sets the value of the ImgHeight property

    /*
    Property ImgWidth

    property ImgWidth

    */
    inline int ImgWidth() const; //Returns the value of ImgWidth
    inline void SetImgWidth(int value); //Sets the value of the ImgWidth property

    /*
    Property IsGrabing

    property IsGrabing

    */
    inline int IsGrabing() const; //Returns the value of IsGrabing

    /*
    Property IsOpened

    property IsOpened

    */
    inline int IsOpened() const; //Returns the value of IsOpened

    /*
    Property LastErrID

    property LastErrID

    */
    inline int LastErrID() const; //Returns the value of LastErrID

    /*
    Property ObjectHandle

    property ObjectHandle

    */
    inline IUnknown* ObjectHandle() const; //Returns the value of ObjectHandle

    /*
    Property SubFrameHeight

    property SubFrameHeight

    */
    inline int SubFrameHeight() const; //Returns the value of SubFrameHeight
    inline void SetSubFrameHeight(int value); //Sets the value of the SubFrameHeight property

    /*
    Property TimeOut

    property TimeOut

    */
    inline int TimeOut() const; //Returns the value of TimeOut
    inline void SetTimeOut(int value); //Sets the value of the TimeOut property

    /*
    Method Close

    method Close

    */
    inline void Close();

    /*
    Method Grab

    method Grab

    */
    inline int Grab(int FrameNum);

    /*
    Method Open

    method Open

    */
    inline int Open();

    /*
    Method OpenMemImage
    */
    inline void OpenMemImage(int Width, int Height, uint& data);

    /*
    Method PrintErrMsg

    method PrintErrMsg

    */
    inline void PrintErrMsg(int ErrID, QString& ErrMsg);

    /*
    Method Snap

    method Snap

    */
    inline int Snap(int FrameNum);

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_DTCONTROL_NOINLINES
inline bool CDTDisplayControl::AutoSize() const
{
    QVariant qax_result = property("AutoSize");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool CDTDisplayControl::BorderVisible() const
{
    QVariant qax_result = property("BorderVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IUnknown* CDTDisplayControl::Object() const
{
    QVariant qax_result = property("Object");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void CDTDisplayControl::SetAutoSize(bool AutoSize)
{
    void *_a[] = {0, (void*)&AutoSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void CDTDisplayControl::SetBorderVisible(bool BorderVisible)
{
    void *_a[] = {0, (void*)&BorderVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}


inline bool IDTDisplayControl::AutoSize() const
{
    QVariant qax_result = property("AutoSize");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IDTDisplayControl::BorderVisible() const
{
    QVariant qax_result = property("BorderVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline IUnknown* IDTDisplayControl::Object() const
{
    QVariant qax_result = property("Object");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void IDTDisplayControl::SetAutoSize(bool AutoSize)
{
    void *_a[] = {0, (void*)&AutoSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IDTDisplayControl::SetBorderVisible(bool BorderVisible)
{
    void *_a[] = {0, (void*)&BorderVisible};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline int CDTDetector::BaudRate() const
{
    QVariant qax_result = property("BaudRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDetector::SetBaudRate(int value){ setProperty("BaudRate", QVariant(value)); }

inline int CDTDetector::ChannelType() const
{
    QVariant qax_result = property("ChannelType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDetector::SetChannelType(int value){ setProperty("ChannelType", QVariant(value)); }

inline int CDTDetector::CmdPort() const
{
    QVariant qax_result = property("CmdPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDetector::SetCmdPort(int value){ setProperty("CmdPort", QVariant(value)); }

inline int CDTDetector::CmdTimeOut() const
{
    QVariant qax_result = property("CmdTimeOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDetector::SetCmdTimeOut(int value){ setProperty("CmdTimeOut", QVariant(value)); }

inline QString CDTDetector::IPAddress() const
{
    QVariant qax_result = property("IPAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CDTDetector::SetIPAddress(const QString& value){ setProperty("IPAddress", QVariant(value)); }

inline int CDTDetector::IsOpened() const
{
    QVariant qax_result = property("IsOpened");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTDetector::LastErrID() const
{
    QVariant qax_result = property("LastErrID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* CDTDetector::ObjectHandle() const
{
    QVariant qax_result = property("ObjectHandle");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int CDTDetector::SerialPort() const
{
    QVariant qax_result = property("SerialPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDetector::SetSerialPort(int value){ setProperty("SerialPort", QVariant(value)); }

inline void CDTDetector::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline int CDTDetector::Open()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline void CDTDetector::PrintErrMsg(int ErrID, QString& ErrMsg)
{
    void *_a[] = {0, (void*)&ErrID, (void*)&ErrMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline int CDTDetector::SendCommand(const QString& bstrCmd, QString& bstrRTMsg)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCmd, (void*)&bstrRTMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int CDTDetector::SendCommandA(int& Cmd, int& pRT)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Cmd, (void*)&pRT};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}


inline int IDTDetector::BaudRate() const
{
    QVariant qax_result = property("BaudRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDetector::SetBaudRate(int value){ setProperty("BaudRate", QVariant(value)); }

inline int IDTDetector::ChannelType() const
{
    QVariant qax_result = property("ChannelType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDetector::SetChannelType(int value){ setProperty("ChannelType", QVariant(value)); }

inline int IDTDetector::CmdPort() const
{
    QVariant qax_result = property("CmdPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDetector::SetCmdPort(int value){ setProperty("CmdPort", QVariant(value)); }

inline int IDTDetector::CmdTimeOut() const
{
    QVariant qax_result = property("CmdTimeOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDetector::SetCmdTimeOut(int value){ setProperty("CmdTimeOut", QVariant(value)); }

inline QString IDTDetector::IPAddress() const
{
    QVariant qax_result = property("IPAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IDTDetector::SetIPAddress(const QString& value){ setProperty("IPAddress", QVariant(value)); }

inline int IDTDetector::IsOpened() const
{
    QVariant qax_result = property("IsOpened");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTDetector::LastErrID() const
{
    QVariant qax_result = property("LastErrID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IDTDetector::ObjectHandle() const
{
    QVariant qax_result = property("ObjectHandle");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int IDTDetector::SerialPort() const
{
    QVariant qax_result = property("SerialPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDetector::SetSerialPort(int value){ setProperty("SerialPort", QVariant(value)); }

inline void IDTDetector::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int IDTDetector::Open()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IDTDetector::PrintErrMsg(int ErrID, QString& ErrMsg)
{
    void *_a[] = {0, (void*)&ErrID, (void*)&ErrMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline int IDTDetector::SendCommand(const QString& bstrCmd, QString& bstrRTMsg)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCmd, (void*)&bstrRTMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int IDTDetector::SendCommandA(int& Cmd, int& pRT)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Cmd, (void*)&pRT};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}


inline int CDTCommanderF3::AverageFilter() const
{
    QVariant qax_result = property("AverageFilter");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetAverageFilter(int value){ setProperty("AverageFilter", QVariant(value)); }

inline int CDTCommanderF3::Baseline() const
{
    QVariant qax_result = property("Baseline");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetBaseline(int value){ setProperty("Baseline", QVariant(value)); }

inline int CDTCommanderF3::CorrectionBaseline() const
{
    QVariant qax_result = property("CorrectionBaseline");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetCorrectionBaseline(int value){ setProperty("CorrectionBaseline", QVariant(value)); }

inline int CDTCommanderF3::CorrectionGain() const
{
    QVariant qax_result = property("CorrectionGain");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetCorrectionGain(int value){ setProperty("CorrectionGain", QVariant(value)); }

inline int CDTCommanderF3::CorrectionOffset() const
{
    QVariant qax_result = property("CorrectionOffset");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetCorrectionOffset(int value){ setProperty("CorrectionOffset", QVariant(value)); }

inline int CDTCommanderF3::DataPattern() const
{
    QVariant qax_result = property("DataPattern");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetDataPattern(int value){ setProperty("DataPattern", QVariant(value)); }

inline IUnknown* CDTCommanderF3::DetectorObject() const
{
    QVariant qax_result = property("DetectorObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void CDTCommanderF3::SetDetectorObject(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DetectorObject", QVariant(typeId, &value));
}

inline int CDTCommanderF3::EndPixel() const
{
    QVariant qax_result = property("EndPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetEndPixel(int value){ setProperty("EndPixel", QVariant(value)); }

inline int CDTCommanderF3::FPGA_Build() const
{
    QVariant qax_result = property("FPGA_Build");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTCommanderF3::FPGA_Version() const
{
    QVariant qax_result = property("FPGA_Version");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTCommanderF3::FrameOut() const
{
    QVariant qax_result = property("FrameOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetFrameOut(int value){ setProperty("FrameOut", QVariant(value)); }

inline int CDTCommanderF3::FrameTrigger() const
{
    QVariant qax_result = property("FrameTrigger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetFrameTrigger(int value){ setProperty("FrameTrigger", QVariant(value)); }

inline int CDTCommanderF3::ImageOutputType() const
{
    QVariant qax_result = property("ImageOutputType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetImageOutputType(int value){ setProperty("ImageOutputType", QVariant(value)); }

inline int CDTCommanderF3::IntegrationTime() const
{
    QVariant qax_result = property("IntegrationTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetIntegrationTime(int value){ setProperty("IntegrationTime", QVariant(value)); }

inline int CDTCommanderF3::IsOpened() const
{
    QVariant qax_result = property("IsOpened");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTCommanderF3::LineTrigger() const
{
    QVariant qax_result = property("LineTrigger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetLineTrigger(int value){ setProperty("LineTrigger", QVariant(value)); }

inline int CDTCommanderF3::MCU_Version() const
{
    QVariant qax_result = property("MCU_Version");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTCommanderF3::MaxIntTime() const
{
    QVariant qax_result = property("MaxIntTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTCommanderF3::MinIntTime() const
{
    QVariant qax_result = property("MinIntTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTCommanderF3::ModuleType() const
{
    QVariant qax_result = property("ModuleType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString CDTCommanderF3::ModuleTypeName() const
{
    QVariant qax_result = property("ModuleTypeName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int CDTCommanderF3::OutputBits() const
{
    QVariant qax_result = property("OutputBits");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetOutputBits(int value){ setProperty("OutputBits", QVariant(value)); }

inline double CDTCommanderF3::OverallGain() const
{
    QVariant qax_result = property("OverallGain");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CDTCommanderF3::SetOverallGain(double value){ setProperty("OverallGain", QVariant(value)); }

inline int CDTCommanderF3::PixelNumber() const
{
    QVariant qax_result = property("PixelNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double CDTCommanderF3::PixelSize() const
{
    QVariant qax_result = property("PixelSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int CDTCommanderF3::SensitivityLevel() const
{
    QVariant qax_result = property("SensitivityLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetSensitivityLevel(int value){ setProperty("SensitivityLevel", QVariant(value)); }

inline QString CDTCommanderF3::SerialNumber() const
{
    QVariant qax_result = property("SerialNumber");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int CDTCommanderF3::StartPixel() const
{
    QVariant qax_result = property("StartPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetStartPixel(int value){ setProperty("StartPixel", QVariant(value)); }

inline int CDTCommanderF3::SumLines() const
{
    QVariant qax_result = property("SumLines");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTCommanderF3::SetSumLines(int value){ setProperty("SumLines", QVariant(value)); }

inline double CDTCommanderF3::Gain(int Index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline void CDTCommanderF3::Initialize(int Mode)
{
    void *_a[] = {0, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void CDTCommanderF3::LoadGain(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void CDTCommanderF3::LoadOffset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void CDTCommanderF3::OffBoardCalibration(int CalibrationType, IUnknown* pImgObject, int StartPixel, int EndPixel, int TargetValue)
{
    void *_a[] = {0, (void*)&CalibrationType, (void*)&pImgObject, (void*)&StartPixel, (void*)&EndPixel, (void*)&TargetValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline int CDTCommanderF3::Offset(int Index)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void CDTCommanderF3::OnBoardGainCalibration(int TargetValue)
{
    void *_a[] = {0, (void*)&TargetValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void CDTCommanderF3::OnBoardOffsetCalibration()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void CDTCommanderF3::ResetGain()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void CDTCommanderF3::ResetOffset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void CDTCommanderF3::RetrieveSysinfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void CDTCommanderF3::SaveCurrentStatus()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void CDTCommanderF3::SaveGain(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void CDTCommanderF3::SaveOffset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void CDTCommanderF3::SendExFrameTrigger()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void CDTCommanderF3::SetGain(int Index, double rhs)
{
    void *_a[] = {0, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void CDTCommanderF3::SetOffset(int Index, int rhs)
{
    void *_a[] = {0, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void CDTCommanderF3::WriteDataPattern(int Base, int Step)
{
    void *_a[] = {0, (void*)&Base, (void*)&Step};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}


inline int IDTCommanderF3::AverageFilter() const
{
    QVariant qax_result = property("AverageFilter");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetAverageFilter(int value){ setProperty("AverageFilter", QVariant(value)); }

inline int IDTCommanderF3::Baseline() const
{
    QVariant qax_result = property("Baseline");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetBaseline(int value){ setProperty("Baseline", QVariant(value)); }

inline int IDTCommanderF3::CorrectionBaseline() const
{
    QVariant qax_result = property("CorrectionBaseline");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetCorrectionBaseline(int value){ setProperty("CorrectionBaseline", QVariant(value)); }

inline int IDTCommanderF3::CorrectionGain() const
{
    QVariant qax_result = property("CorrectionGain");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetCorrectionGain(int value){ setProperty("CorrectionGain", QVariant(value)); }

inline int IDTCommanderF3::CorrectionOffset() const
{
    QVariant qax_result = property("CorrectionOffset");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetCorrectionOffset(int value){ setProperty("CorrectionOffset", QVariant(value)); }

inline int IDTCommanderF3::DataPattern() const
{
    QVariant qax_result = property("DataPattern");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetDataPattern(int value){ setProperty("DataPattern", QVariant(value)); }

inline IUnknown* IDTCommanderF3::DetectorObject() const
{
    QVariant qax_result = property("DetectorObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void IDTCommanderF3::SetDetectorObject(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DetectorObject", QVariant(typeId, &value));
}

inline int IDTCommanderF3::EndPixel() const
{
    QVariant qax_result = property("EndPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetEndPixel(int value){ setProperty("EndPixel", QVariant(value)); }

inline int IDTCommanderF3::FPGA_Build() const
{
    QVariant qax_result = property("FPGA_Build");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTCommanderF3::FPGA_Version() const
{
    QVariant qax_result = property("FPGA_Version");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTCommanderF3::FrameOut() const
{
    QVariant qax_result = property("FrameOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetFrameOut(int value){ setProperty("FrameOut", QVariant(value)); }

inline int IDTCommanderF3::FrameTrigger() const
{
    QVariant qax_result = property("FrameTrigger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetFrameTrigger(int value){ setProperty("FrameTrigger", QVariant(value)); }

inline int IDTCommanderF3::ImageOutputType() const
{
    QVariant qax_result = property("ImageOutputType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetImageOutputType(int value){ setProperty("ImageOutputType", QVariant(value)); }

inline int IDTCommanderF3::IntegrationTime() const
{
    QVariant qax_result = property("IntegrationTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetIntegrationTime(int value){ setProperty("IntegrationTime", QVariant(value)); }

inline int IDTCommanderF3::IsOpened() const
{
    QVariant qax_result = property("IsOpened");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTCommanderF3::LineTrigger() const
{
    QVariant qax_result = property("LineTrigger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetLineTrigger(int value){ setProperty("LineTrigger", QVariant(value)); }

inline int IDTCommanderF3::MCU_Version() const
{
    QVariant qax_result = property("MCU_Version");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTCommanderF3::MaxIntTime() const
{
    QVariant qax_result = property("MaxIntTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTCommanderF3::MinIntTime() const
{
    QVariant qax_result = property("MinIntTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTCommanderF3::ModuleType() const
{
    QVariant qax_result = property("ModuleType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IDTCommanderF3::ModuleTypeName() const
{
    QVariant qax_result = property("ModuleTypeName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IDTCommanderF3::OutputBits() const
{
    QVariant qax_result = property("OutputBits");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetOutputBits(int value){ setProperty("OutputBits", QVariant(value)); }

inline double IDTCommanderF3::OverallGain() const
{
    QVariant qax_result = property("OverallGain");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IDTCommanderF3::SetOverallGain(double value){ setProperty("OverallGain", QVariant(value)); }

inline int IDTCommanderF3::PixelNumber() const
{
    QVariant qax_result = property("PixelNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double IDTCommanderF3::PixelSize() const
{
    QVariant qax_result = property("PixelSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int IDTCommanderF3::SensitivityLevel() const
{
    QVariant qax_result = property("SensitivityLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetSensitivityLevel(int value){ setProperty("SensitivityLevel", QVariant(value)); }

inline QString IDTCommanderF3::SerialNumber() const
{
    QVariant qax_result = property("SerialNumber");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IDTCommanderF3::StartPixel() const
{
    QVariant qax_result = property("StartPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetStartPixel(int value){ setProperty("StartPixel", QVariant(value)); }

inline int IDTCommanderF3::SumLines() const
{
    QVariant qax_result = property("SumLines");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTCommanderF3::SetSumLines(int value){ setProperty("SumLines", QVariant(value)); }

inline double IDTCommanderF3::Gain(int Index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IDTCommanderF3::Initialize(int Mode)
{
    void *_a[] = {0, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IDTCommanderF3::LoadGain(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IDTCommanderF3::LoadOffset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IDTCommanderF3::OffBoardCalibration(int CalibrationType, IUnknown* pImgObject, int StartPixel, int EndPixel, int TargetValue)
{
    void *_a[] = {0, (void*)&CalibrationType, (void*)&pImgObject, (void*)&StartPixel, (void*)&EndPixel, (void*)&TargetValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline int IDTCommanderF3::Offset(int Index)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IDTCommanderF3::OnBoardGainCalibration(int TargetValue)
{
    void *_a[] = {0, (void*)&TargetValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IDTCommanderF3::OnBoardOffsetCalibration()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IDTCommanderF3::ResetGain()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IDTCommanderF3::ResetOffset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IDTCommanderF3::RetrieveSysinfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IDTCommanderF3::SaveCurrentStatus()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IDTCommanderF3::SaveGain(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IDTCommanderF3::SaveOffset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IDTCommanderF3::SendExFrameTrigger()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IDTCommanderF3::SetGain(int Index, double rhs)
{
    void *_a[] = {0, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IDTCommanderF3::SetOffset(int Index, int rhs)
{
    void *_a[] = {0, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void IDTCommanderF3::WriteDataPattern(int Base, int Step)
{
    void *_a[] = {0, (void*)&Base, (void*)&Step};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}


inline int CImageObject::BytesPerPixel() const
{
    QVariant qax_result = property("BytesPerPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CImageObject::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CImageObject::ImageDataAddress() const
{
    QVariant qax_result = property("ImageDataAddress");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CImageObject::SetImageDataAddress(int value){ setProperty("ImageDataAddress", QVariant(value)); }

inline int CImageObject::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void CImageObject::ColAverage(int& pAvg)
{
    void *_a[] = {0, (void*)&pAvg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void CImageObject::ColMax(int& pMax)
{
    void *_a[] = {0, (void*)&pMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void CImageObject::ColMin(int& pMin)
{
    void *_a[] = {0, (void*)&pMin};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void CImageObject::ColNoise(double& pNoise)
{
    void *_a[] = {0, (void*)&pNoise};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline int CImageObject::ImageLineAddress(int LineIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LineIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void CImageObject::Open(int Width, int Height, int BytesPerPixel)
{
    void *_a[] = {0, (void*)&Width, (void*)&Height, (void*)&BytesPerPixel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline int CImageObject::Pixel(int X, int Y)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void CImageObject::RowAverage(int& pAvg)
{
    void *_a[] = {0, (void*)&pAvg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void CImageObject::RowMax(int& pMax)
{
    void *_a[] = {0, (void*)&pMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void CImageObject::RowMin(int& pMin)
{
    void *_a[] = {0, (void*)&pMin};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void CImageObject::RowNoise(double& pNoise)
{
    void *_a[] = {0, (void*)&pNoise};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void CImageObject::SetPixel(int X, int Y, int rhs)
{
    void *_a[] = {0, (void*)&X, (void*)&Y, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline int IImageObject::BytesPerPixel() const
{
    QVariant qax_result = property("BytesPerPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IImageObject::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IImageObject::ImageDataAddress() const
{
    QVariant qax_result = property("ImageDataAddress");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IImageObject::SetImageDataAddress(int value){ setProperty("ImageDataAddress", QVariant(value)); }

inline int IImageObject::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IImageObject::ColAverage(int& pAvg)
{
    void *_a[] = {0, (void*)&pAvg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IImageObject::ColMax(int& pMax)
{
    void *_a[] = {0, (void*)&pMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IImageObject::ColMin(int& pMin)
{
    void *_a[] = {0, (void*)&pMin};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IImageObject::ColNoise(double& pNoise)
{
    void *_a[] = {0, (void*)&pNoise};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline int IImageObject::ImageLineAddress(int LineIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LineIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IImageObject::Open(int Width, int Height, int BytesPerPixel)
{
    void *_a[] = {0, (void*)&Width, (void*)&Height, (void*)&BytesPerPixel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline int IImageObject::Pixel(int X, int Y)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IImageObject::RowAverage(int& pAvg)
{
    void *_a[] = {0, (void*)&pAvg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IImageObject::RowMax(int& pMax)
{
    void *_a[] = {0, (void*)&pMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IImageObject::RowMin(int& pMin)
{
    void *_a[] = {0, (void*)&pMin};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IImageObject::RowNoise(double& pNoise)
{
    void *_a[] = {0, (void*)&pNoise};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IImageObject::SetPixel(int X, int Y, int rhs)
{
    void *_a[] = {0, (void*)&X, (void*)&Y, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline IUnknown* CDTDisplay::DataSource() const
{
    QVariant qax_result = property("DataSource");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void CDTDisplay::SetDataSource(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DataSource", QVariant(typeId, &value));
}

inline IUnknown* CDTDisplay::DisplayControl() const
{
    QVariant qax_result = property("DisplayControl");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void CDTDisplay::SetDisplayControl(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DisplayControl", QVariant(typeId, &value));
}

inline int CDTDisplay::DisplayScale() const
{
    QVariant qax_result = property("DisplayScale");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDisplay::SetDisplayScale(int value){ setProperty("DisplayScale", QVariant(value)); }

inline double CDTDisplay::Gamma() const
{
    QVariant qax_result = property("Gamma");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CDTDisplay::SetGamma(double value){ setProperty("Gamma", QVariant(value)); }

inline IUnknown* CDTDisplay::ImageObject() const
{
    QVariant qax_result = property("ImageObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline uint CDTDisplay::ImgHeight() const
{
    QVariant qax_result = property("ImgHeight");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void CDTDisplay::SetImgHeight(uint value){ setProperty("ImgHeight", QVariant(value)); }

inline uint CDTDisplay::ImgWidth() const
{
    QVariant qax_result = property("ImgWidth");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void CDTDisplay::SetImgWidth(uint value){ setProperty("ImgWidth", QVariant(value)); }

inline int CDTDisplay::MapEnd() const
{
    QVariant qax_result = property("MapEnd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDisplay::SetMapEnd(int value){ setProperty("MapEnd", QVariant(value)); }

inline int CDTDisplay::MapStart() const
{
    QVariant qax_result = property("MapStart");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDisplay::SetMapStart(int value){ setProperty("MapStart", QVariant(value)); }

inline IUnknown* CDTDisplay::ObjectHandle() const
{
    QVariant qax_result = property("ObjectHandle");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int CDTDisplay::OrgPoint_X() const
{
    QVariant qax_result = property("OrgPoint_X");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDisplay::SetOrgPoint_X(int value){ setProperty("OrgPoint_X", QVariant(value)); }

inline int CDTDisplay::OrgPoint_Y() const
{
    QVariant qax_result = property("OrgPoint_Y");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDisplay::SetOrgPoint_Y(int value){ setProperty("OrgPoint_Y", QVariant(value)); }

inline int CDTDisplay::RefreshMode() const
{
    QVariant qax_result = property("RefreshMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDisplay::SetRefreshMode(int value){ setProperty("RefreshMode", QVariant(value)); }

inline int CDTDisplay::RefreshRate() const
{
    QVariant qax_result = property("RefreshRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTDisplay::SetRefreshRate(int value){ setProperty("RefreshRate", QVariant(value)); }

inline void CDTDisplay::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void CDTDisplay::Load(const QString& FilePath)
{
    void *_a[] = {0, (void*)&FilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline int CDTDisplay::Open()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void CDTDisplay::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void CDTDisplay::Repaint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void CDTDisplay::Save(const QString& FilePath)
{
    void *_a[] = {0, (void*)&FilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}


inline IUnknown* IDTDisplay::DataSource() const
{
    QVariant qax_result = property("DataSource");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void IDTDisplay::SetDataSource(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DataSource", QVariant(typeId, &value));
}

inline IUnknown* IDTDisplay::DisplayControl() const
{
    QVariant qax_result = property("DisplayControl");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void IDTDisplay::SetDisplayControl(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DisplayControl", QVariant(typeId, &value));
}

inline int IDTDisplay::DisplayScale() const
{
    QVariant qax_result = property("DisplayScale");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDisplay::SetDisplayScale(int value){ setProperty("DisplayScale", QVariant(value)); }

inline double IDTDisplay::Gamma() const
{
    QVariant qax_result = property("Gamma");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IDTDisplay::SetGamma(double value){ setProperty("Gamma", QVariant(value)); }

inline IUnknown* IDTDisplay::ImageObject() const
{
    QVariant qax_result = property("ImageObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline uint IDTDisplay::ImgHeight() const
{
    QVariant qax_result = property("ImgHeight");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void IDTDisplay::SetImgHeight(uint value){ setProperty("ImgHeight", QVariant(value)); }

inline uint IDTDisplay::ImgWidth() const
{
    QVariant qax_result = property("ImgWidth");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void IDTDisplay::SetImgWidth(uint value){ setProperty("ImgWidth", QVariant(value)); }

inline int IDTDisplay::MapEnd() const
{
    QVariant qax_result = property("MapEnd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDisplay::SetMapEnd(int value){ setProperty("MapEnd", QVariant(value)); }

inline int IDTDisplay::MapStart() const
{
    QVariant qax_result = property("MapStart");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDisplay::SetMapStart(int value){ setProperty("MapStart", QVariant(value)); }

inline IUnknown* IDTDisplay::ObjectHandle() const
{
    QVariant qax_result = property("ObjectHandle");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int IDTDisplay::OrgPoint_X() const
{
    QVariant qax_result = property("OrgPoint_X");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDisplay::SetOrgPoint_X(int value){ setProperty("OrgPoint_X", QVariant(value)); }

inline int IDTDisplay::OrgPoint_Y() const
{
    QVariant qax_result = property("OrgPoint_Y");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDisplay::SetOrgPoint_Y(int value){ setProperty("OrgPoint_Y", QVariant(value)); }

inline int IDTDisplay::RefreshMode() const
{
    QVariant qax_result = property("RefreshMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDisplay::SetRefreshMode(int value){ setProperty("RefreshMode", QVariant(value)); }

inline int IDTDisplay::RefreshRate() const
{
    QVariant qax_result = property("RefreshRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTDisplay::SetRefreshRate(int value){ setProperty("RefreshRate", QVariant(value)); }

inline void IDTDisplay::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IDTDisplay::Load(const QString& FilePath)
{
    void *_a[] = {0, (void*)&FilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline int IDTDisplay::Open()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IDTDisplay::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IDTDisplay::Repaint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IDTDisplay::Save(const QString& FilePath)
{
    void *_a[] = {0, (void*)&FilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline int CDTImage::BandWidth() const
{
    QVariant qax_result = property("BandWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTImage::BytesPerPixel() const
{
    QVariant qax_result = property("BytesPerPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetBytesPerPixel(int value){ setProperty("BytesPerPixel", QVariant(value)); }

inline int CDTImage::ChannelType() const
{
    QVariant qax_result = property("ChannelType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetChannelType(int value){ setProperty("ChannelType", QVariant(value)); }

inline IUnknown* CDTImage::DetectorObject() const
{
    QVariant qax_result = property("DetectorObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void CDTImage::SetDetectorObject(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DetectorObject", QVariant(typeId, &value));
}

inline int CDTImage::DualScanMode() const
{
    QVariant qax_result = property("DualScanMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetDualScanMode(int value){ setProperty("DualScanMode", QVariant(value)); }

inline int CDTImage::ExFrameTrigger() const
{
    QVariant qax_result = property("ExFrameTrigger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetExFrameTrigger(int value){ setProperty("ExFrameTrigger", QVariant(value)); }

inline IUnknown* CDTImage::ImageObject() const
{
    QVariant qax_result = property("ImageObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int CDTImage::ImagePort() const
{
    QVariant qax_result = property("ImagePort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetImagePort(int value){ setProperty("ImagePort", QVariant(value)); }

inline int CDTImage::ImgHeight() const
{
    QVariant qax_result = property("ImgHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetImgHeight(int value){ setProperty("ImgHeight", QVariant(value)); }

inline int CDTImage::ImgWidth() const
{
    QVariant qax_result = property("ImgWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetImgWidth(int value){ setProperty("ImgWidth", QVariant(value)); }

inline int CDTImage::IsGrabing() const
{
    QVariant qax_result = property("IsGrabing");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTImage::IsOpened() const
{
    QVariant qax_result = property("IsOpened");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int CDTImage::LastErrID() const
{
    QVariant qax_result = property("LastErrID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* CDTImage::ObjectHandle() const
{
    QVariant qax_result = property("ObjectHandle");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int CDTImage::SubFrameHeight() const
{
    QVariant qax_result = property("SubFrameHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetSubFrameHeight(int value){ setProperty("SubFrameHeight", QVariant(value)); }

inline int CDTImage::TimeOut() const
{
    QVariant qax_result = property("TimeOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CDTImage::SetTimeOut(int value){ setProperty("TimeOut", QVariant(value)); }

inline void CDTImage::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline int CDTImage::Grab(int FrameNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FrameNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline int CDTImage::Open()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline void CDTImage::OpenMemImage(int Width, int Height, uint& data)
{
    void *_a[] = {0, (void*)&Width, (void*)&Height, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void CDTImage::PrintErrMsg(int ErrID, QString& ErrMsg)
{
    void *_a[] = {0, (void*)&ErrID, (void*)&ErrMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline int CDTImage::Snap(int FrameNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FrameNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline void CDTImage::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}


inline int IDTImage::BandWidth() const
{
    QVariant qax_result = property("BandWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTImage::BytesPerPixel() const
{
    QVariant qax_result = property("BytesPerPixel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetBytesPerPixel(int value){ setProperty("BytesPerPixel", QVariant(value)); }

inline int IDTImage::ChannelType() const
{
    QVariant qax_result = property("ChannelType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetChannelType(int value){ setProperty("ChannelType", QVariant(value)); }

inline IUnknown* IDTImage::DetectorObject() const
{
    QVariant qax_result = property("DetectorObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void IDTImage::SetDetectorObject(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("DetectorObject", QVariant(typeId, &value));
}

inline int IDTImage::DualScanMode() const
{
    QVariant qax_result = property("DualScanMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetDualScanMode(int value){ setProperty("DualScanMode", QVariant(value)); }

inline int IDTImage::ExFrameTrigger() const
{
    QVariant qax_result = property("ExFrameTrigger");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetExFrameTrigger(int value){ setProperty("ExFrameTrigger", QVariant(value)); }

inline IUnknown* IDTImage::ImageObject() const
{
    QVariant qax_result = property("ImageObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int IDTImage::ImagePort() const
{
    QVariant qax_result = property("ImagePort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetImagePort(int value){ setProperty("ImagePort", QVariant(value)); }

inline int IDTImage::ImgHeight() const
{
    QVariant qax_result = property("ImgHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetImgHeight(int value){ setProperty("ImgHeight", QVariant(value)); }

inline int IDTImage::ImgWidth() const
{
    QVariant qax_result = property("ImgWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetImgWidth(int value){ setProperty("ImgWidth", QVariant(value)); }

inline int IDTImage::IsGrabing() const
{
    QVariant qax_result = property("IsGrabing");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTImage::IsOpened() const
{
    QVariant qax_result = property("IsOpened");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IDTImage::LastErrID() const
{
    QVariant qax_result = property("LastErrID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IDTImage::ObjectHandle() const
{
    QVariant qax_result = property("ObjectHandle");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline int IDTImage::SubFrameHeight() const
{
    QVariant qax_result = property("SubFrameHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetSubFrameHeight(int value){ setProperty("SubFrameHeight", QVariant(value)); }

inline int IDTImage::TimeOut() const
{
    QVariant qax_result = property("TimeOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IDTImage::SetTimeOut(int value){ setProperty("TimeOut", QVariant(value)); }

inline void IDTImage::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int IDTImage::Grab(int FrameNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FrameNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IDTImage::Open()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IDTImage::OpenMemImage(int Width, int Height, uint& data)
{
    void *_a[] = {0, (void*)&Width, (void*)&Height, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IDTImage::PrintErrMsg(int ErrID, QString& ErrMsg)
{
    void *_a[] = {0, (void*)&ErrID, (void*)&ErrMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline int IDTImage::Snap(int FrameNum)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FrameNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void IDTImage::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<DTControl::CDTDisplayControl, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::CDTDisplayControl*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::CDTDisplayControl();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::CDTDisplayControl*>(t)->DTControl::CDTDisplayControl::~CDTDisplayControl();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::CDTDisplayControl;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::CDTDisplayControl*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::CDTDisplayControl*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::IDTDisplayControl, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::IDTDisplayControl*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::IDTDisplayControl();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::IDTDisplayControl*>(t)->DTControl::IDTDisplayControl::~IDTDisplayControl();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::IDTDisplayControl;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::IDTDisplayControl*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::IDTDisplayControl*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::CDTDetector, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::CDTDetector*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::CDTDetector();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::CDTDetector*>(t)->DTControl::CDTDetector::~CDTDetector();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::CDTDetector;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::CDTDetector*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::CDTDetector*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::IDTDetector, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::IDTDetector*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::IDTDetector();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::IDTDetector*>(t)->DTControl::IDTDetector::~IDTDetector();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::IDTDetector;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::IDTDetector*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::IDTDetector*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::CDTCommanderF3, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::CDTCommanderF3*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::CDTCommanderF3();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::CDTCommanderF3*>(t)->DTControl::CDTCommanderF3::~CDTCommanderF3();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::CDTCommanderF3;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::CDTCommanderF3*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::CDTCommanderF3*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::IDTCommanderF3, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::IDTCommanderF3*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::IDTCommanderF3();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::IDTCommanderF3*>(t)->DTControl::IDTCommanderF3::~IDTCommanderF3();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::IDTCommanderF3;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::IDTCommanderF3*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::IDTCommanderF3*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::CImageObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::CImageObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::CImageObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::CImageObject*>(t)->DTControl::CImageObject::~CImageObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::CImageObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::CImageObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::CImageObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::IImageObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::IImageObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::IImageObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::IImageObject*>(t)->DTControl::IImageObject::~IImageObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::IImageObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::IImageObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::IImageObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::CDTDisplay, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::CDTDisplay*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::CDTDisplay();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::CDTDisplay*>(t)->DTControl::CDTDisplay::~CDTDisplay();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::CDTDisplay;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::CDTDisplay*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::CDTDisplay*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::IDTDisplay, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::IDTDisplay*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::IDTDisplay();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::IDTDisplay*>(t)->DTControl::IDTDisplay::~IDTDisplay();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::IDTDisplay;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::IDTDisplay*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::IDTDisplay*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::CDTImage, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::CDTImage*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::CDTImage();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::CDTImage*>(t)->DTControl::CDTImage::~CDTImage();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::CDTImage;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::CDTImage*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::CDTImage*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DTControl::IDTImage, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DTControl::IDTImage*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DTControl::IDTImage();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DTControl::IDTImage*>(t)->DTControl::IDTImage::~IDTImage();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DTControl::IDTImage;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DTControl::IDTImage*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DTControl::IDTImage*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

